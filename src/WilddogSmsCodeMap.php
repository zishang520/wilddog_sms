<?php
namespace luoyy\WilddogSmsSdk;

/**
 * 野狗短信Api错误提示
 * @Author:zishang520
 * @Email:zishang520@gmail.com
 * @HomePage:http://www.luoyy.com
 * @version: 1.0 beta
 */
class WilddogSmsCodeMap
{
    /**
     * @var 野狗API短信错误码
     */
    private static $errorMsg = [
        70001 => 'appId参数无效',
        70002 => '请求参数错误',
        70003 => '消息类型参数错误',
        70103 => '模板不存在',
        70104 => '获取模板失败',
        70107 => '模板未审核通过',
        70108 => '模板名称重复',
        70201 => '发送手机为空',
        70202 => '单批发送手机号超过最大值',
        70203 => '时间戳无效,与服务器时间间隔大于60秒',
        70204 => 'SMS 变量内容组装失败',
        70205 => '短信消息发送失败',
        70206 => 'SMS 参数签名为空',
        70207 => 'SMS 参数签名校验失败',
        70208 => 'SMS 短信签名为空',
        70209 => 'SMS 中含有敏感词',
        70210 => 'SMS 状态查询失败',
        70211 => 'SMS 密钥查询无效',
        70212 => 'SMS 服务发送频率异常,请稍后重试',
        70213 => 'SMS 验证码输入错误',
        70214 => '手机的格式不正确目前支持的是11位手机',
        70215 => 'SMS 变量长度过长',
        70216 => 'SMS 内容过长',
        70217 => 'SMS 变量含有超链接',
        70218 => '手机没有发送验证码，请重新发送验证码',
        70219 => '手机发送验证码出现错误，请重试',
        70220 => '发送参数格式错误，不是JSONArray类型',
        70230 => '发送推送类短信, 手机号列表解析出错, 请检查格式',
        70231 => '发送推送类短信, 参数解析出错, 请检查格式',
        70232 => '发送推送类短信, 参数个数错误, 请检查格式',
        70301 => '帐户余额不足5元，不能开启短信服务',
        70302 => '帐户余额不足 0 元，不能使用短信服务',
        70303 => '帐户余额不足支付本次短信服务',
        70304 => '发送接口调用频繁,超过每秒 10 次，请稍后重试]',
        70330 => '发送参数格式错误，不是有效的数据类型',
        70332 => '这个 API 请求方法 POST 或 GET 不支持，请检查',
    ];

    /**
     * @var HTTP状态码
     */
    private static $httpCode = [
        100 => '继续',
        101 => '切换协议',
        200 => '成功',
        201 => '已创建',
        202 => '已接受',
        203 => '非授权信息',
        204 => '无内容',
        205 => '重置内容',
        206 => '部分内容',
        300 => '多种选择',
        301 => '永久移动',
        302 => '临时移动',
        303 => '查看其他位置',
        304 => '未修改',
        305 => '使用代理',
        307 => '临时重定向',
        400 => '错误请求',
        401 => '未授权',
        403 => '禁止',
        404 => '未找到',
        405 => '方法禁用',
        406 => '不接受',
        407 => '需要代理授权',
        408 => '请求超时',
        409 => '冲突',
        410 => '已删除',
        411 => '需要有效长度',
        412 => '未满足前提条件',
        413 => '请求实体过大',
        414 => '请求的 URI 过长',
        415 => '不支持的媒体类型',
        416 => '请求范围不符合要求',
        417 => '未满足期望值',
        500 => '服务器内部错误',
        501 => '尚未实施',
        502 => '错误网关',
        503 => '服务不可用',
        504 => '网关超时',
        505 => 'HTTP 版本不受支持',
    ];

    /**
     * @var 获取验证码时返回的状态
     */
    private static $statusCode = [
        'DELIVRD' => '发送成功',
        'MY:0001' => '表示常规性失败，通常是通道返回了错误码',
        'MY:0002' => '操作超时',
        'MY:0003' => '网络错误失败',
        'MY:0004' => '超过限制,重复发送',
        'MY:0005' => '超过最大次数限制',
        'MY:1000' => '程序未激活',
        'MY:1001' => '参数错误',
        'MY:1002' => '用户名为空',
        'MY:1003' => '密码为空',
        'MY:1004' => '用户名错误',
        'MY:1005' => '密码错误',
        'MY:1006' => 'IP绑定错误',
        'MY:1007' => '用户已停用',
        'MY:1106' => '没有发送通道',
        'MY:1103' => '手机号码为空',
        'MY:1104' => '手机号重复',
        'MY:1108' => '错误的手机号码',
        'MY:1109' => '黑名单的手机号码',
        'MY:1110' => '没有通道的手机号码',
        'MY:1111' => '额度不足',
        'MY:1112' => '没有配置产品',
        'MY:1114' => '扩展错误',
        'MY:2001' => '内容为空',
        'MY:2105' => '内容太长',
        'MY:2107' => '敏感词汇',
        'MY:2113' => '需要签名',
        'MY:2114' => '签名错误',
        'MY:9999' => '系统内部错误',
        'DB:Black' => '黑名单',
        'DB:Back' => '审核退回',
    ];
    /**
     * @param $code
     */
    public static function getError($code = 0)
    {
        if (array_key_exists($code, self::$errorMsg)) {
            return self::$errorMsg[$code];
        } else {
            return '未知错误';
        }
    }
    /**
     * @param $code
     */
    public static function getHttpCode($code = 0)
    {
        if (array_key_exists($code, self::$httpCode)) {
            return self::$httpCode[$code];
        } else {
            return '未知状态';
        }
    }
    /**
     * @param $code
     */
    public static function getStatusCode($code = 0)
    {
        if (array_key_exists($code, self::$statusCode)) {
            return self::$statusCode[$code];
        } else {
            return '未知状态';
        }
    }
}
